#!/bin/bash
#
# transactional-update - apply updates to the system in an atomic way
#
# Author: Thorsten Kukuk <kukuk@suse.com>
# Copyright (C) 2016, 2017, 2018, 2019, 2020 SUSE Linux GmbH
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

export LANG=C
export DISABLE_SNAPPER_ZYPP_PLUGIN=1

DIR_TO_MOUNT="var/log boot/writable var/tmp"
EXITCODE=0
VERBOSITY=2
DO_CLEANUP_SNAPSHOTS=0
DO_DUP=0
DO_ROLLBACK=0
DO_SELF_UPDATE=1
DO_REGISTRATION=0
DO_RUN=0
REGISTRATION_ARGS=""
ROLLBACK_SNAPSHOT=0
REBOOT_AFTERWARDS=0
REBOOT_METHOD="auto"
LOGFILE="/var/log/tiu.log"
STATE_FILE="/var/lib/misc/tiu.state"
NEEDS_RESTARTING_FILE="/var/run/reboot-needed"
LOCKFILE="/run/tiu.pid"

TMPDIR=${TMPDIR:-/tmp}

# Initialize internal variables
SNAPSHOT_ID=""
SNAPSHOT_DIR=""
BASE_SNAPSHOT_ID=""
MOUNT_DIR=""
SNAPPER_NO_DBUS=""
TMPFILE=""

# Create stderr alias for things that shouldn't be logged into logfile
if [ ! -e /proc/$$/fd/4 ]; then
	exec 4>&2
fi
# Log stderr to log file
exec 2> >(exec tee -a "${LOGFILE}")

usage() {
    echo "Syntax: tiu"
    echo "--help, -h                 Display this help and exit"
    echo "--version                  Display version and exit"
    exit $1
}

print_version() {
    echo "tiu"
    exit 0
}

log_info() {
    echo $(date "+%Y-%m-%d %H:%M") "$@" >> ${LOGFILE}
    if [ ${VERBOSITY} -ge 2 ]; then
	echo -e "$@"
    fi
}

log_error() {
    echo `date "+%Y-%m-%d %H:%M"` "$@" >> ${LOGFILE}
    echo -e "$@" 1>&4
}

bashlock() {
    echo "$$" >"$LOCKFILE.$$"
    if ! ln "$LOCKFILE.$$" "$LOCKFILE" 2>/dev/null; then
	PID=`head -1 "$LOCKFILE"`
	if [ -z "$PID" ]; then
	    rm -f "$LOCKFILE"
	else
	   kill -0 "$PID" 2>/dev/null || rm -f "$LOCKFILE"
	fi

	if ! ln "$LOCKFILE.$$" "$LOCKFILE" 2>/dev/null; then
	    rm -f "$LOCKFILE.$$"
	    return 1
	fi
    fi

    rm -f "$LOCKFILE.$$"
    trap 'rm -f "$LOCKFILE"' EXIT

    return 0
}

save_state_file() {
    echo "LAST_WORKING_SNAPSHOTS=\"${LAST_WORKING_SNAPSHOTS}\"" > ${STATE_FILE}
    echo "UNUSED_SNAPSHOTS=\"${UNUSED_SNAPSHOTS}\"" >>  ${STATE_FILE}
}

rebuild_kdump_initrd() {
    local MOUNT_DIR=$1

    test -f /usr/lib/systemd/system/kdump.service || return
    systemctl is-enabled --quiet kdump.service
    if [ $? = 0 -a -x ${MOUNT_DIR}/usr/sbin/tu-rebuild-kdump-initrd ]; then
	chroot ${MOUNT_DIR} /usr/sbin/tu-rebuild-kdump-initrd |& tee -a ${LOGFILE}
    fi
}

# Only called in error case; reverts everything to previous state.
quit() {
    teardown

    # Wait for things to settle down
    for delay in {1..10}; do
	if [ -z "${SNAPSHOT_DIR}" -o -z "`lsof "${SNAPSHOT_DIR}" 2>/dev/null`" ]; then
	    break
	fi
	sleep $delay
    done

    if [ -n "${SNAPSHOT_ID}" ] ; then
	log_info "Removing snapshot #${SNAPSHOT_ID}..."
	snapper ${SNAPPER_NO_DBUS} delete ${SNAPSHOT_ID} |& tee -a ${LOGFILE}
    fi
    log_info "tiu finished"
    exit $1
}

# Called on exit (both on success and failure); cleans up temporary files,
# mount points and variables
teardown() {
    # Unset variable
    unset TRANSACTIONAL_UPDATE

    # Cleanup temporary files
    rm -f ${TMPFILE}

    # The following commands only make sense if snapshot dir is set already
    if [ "${SNAPSHOT_DIR}" = "" ]; then
	return
    fi

    # Cleanup of temporary mount point
    if [ -e "${MOUNT_DIR}" ]; then
	if findmnt ${MOUNT_DIR} >/dev/null; then
	    umount -R ${MOUNT_DIR}
	fi
	rmdir ${MOUNT_DIR}
    fi
}

reboot_via_rebootmgr() {
    /usr/sbin/rebootmgrctl is-active --quiet
    if [ $? -eq 0 ]; then
	# rebootmgrctl is running
	/usr/sbin/rebootmgrctl reboot
	log_info "transactional-update finished - informed rebootmgr"
	exit 0
    fi
}

reboot_via_systemd() {
    log_info "transactional-update finished - rebooting machine"
    sync
    systemctl reboot |& tee -a ${LOGFILE}
    exit 0
}

reboot_via_kured() {
    log_info "transactional-update finished - informed kured"
    touch /var/run/reboot-required
    exit 0
}

reboot_via_kexec() {
    log_info "transactional-update finished - re-initializing system with kexec"
    kexec -l /boot/vmlinuz --initrd=/boot/initrd --reuse-cmdline
    sync
    systemctl kexec |& tee -a ${LOGFILE}
    exit 0
}

reboot_autodetect() {
    if [ -x /usr/sbin/rebootmgrctl ]; then
	reboot_via_rebootmgr
    fi
    # If rebootmgr is inactive try systemd
    reboot_via_systemd
}

add_unique_id() {
    local NEW_ID="$1"

    for snap in ${LAST_WORKING_SNAPSHOTS}; do
	if [ ${snap} -eq ${NEW_ID} ]; then
	    return
	fi
    done
    LAST_WORKING_SNAPSHOTS="${NEW_ID} ${LAST_WORKING_SNAPSHOTS}"
}

check_registration_on_next_reboot() {
    local VARDIR="/var/lib/rollback"
    # If VARDIR is part of the root file system (usually on rw systems), then
    # create the file in the new snapshot
    if [ "$(findmnt --noheadings --output TARGET --target "${VARDIR}")" = "/" ]; then
	VARDIR="${MOUNT_DIR}/${VARDIR}"
    fi
    test -d "${VARDIR}" || mkdir -p "${VARDIR}"
    touch "${VARDIR}/check-registration"
}

ORIG_ARGS=("$@")

while [ 1 ]; do
    if [ $# -eq 0 ]; then
	break
    fi

    case "$1" in
	reboot)
	    REBOOT_AFTERWARDS=1
	    shift
	    ;;
	--quiet)
	    VERBOSITY=1
	    shift
	    ;;
	-h|--help)
	    usage 0
	    ;;
	--version)
	    print_version
	    ;;
	*)
	    if [ $# -ge 1 ]; then
		usage 1;
	    fi
	    ;;
    esac
done

# Prevent running transactional-update inside transactional-update
if [ -n "${TRANSACTIONAL_UPDATE}" ]; then
    log_error "Cannot call transactional-update from within transactional-update environment!"
    exit 1
fi

# Check if this is a self-updated transactional-update; if it isn't lock and
# check for update
bashlock
if [ $? -ne 0 ]; then
	log_error "Couldn't get lock, is another instance already running?"
	exit 1
fi

# Clean up in case the application is interrupted
trap 'log_error "Received termination signal..." && quit 1' HUP INT QUIT TERM

# Load old state file
if [ -f ${STATE_FILE} ]; then
    . ${STATE_FILE}
fi

log_info "tiu started"
log_info "Options: ${ORIG_ARGS[@]}"

if [ "`stat -f -c %T /`" != "btrfs" ]; then
  log_error "ERROR: not using btrfs as root file system!"
  log_info "transactional-update finished"
  exit 1
fi

if [ ! -d /.snapshots ]; then
  log_error "ERROR: no snapshots for root file system configured!"
  log_info "transactional-update finished"
  exit 1
fi

CURRENT_SNAPSHOT_ID=`grep subvol=/@/.snapshots/ /proc/mounts | grep "/ btrfs" | sed -e 's|.*.snapshots/\(.*\)/snapshot.*|\1|g'`
RO_ROOT=`btrfs property get / ro | sed -e 's|ro=||'`

snapper_args=(create --print-number --description "Snapshot Update of #${CURRENT_SNAPSHOT_ID}")
SNAPSHOT_ID=`snapper "${snapper_args[@]}"`
if [ $? -ne 0 ]; then
    SNAPPER_NO_DBUS="--no-dbus"
    SNAPSHOT_ID=`snapper ${SNAPPER_NO_DBUS} "${snapper_args[@]}"`
    if [ $? -ne 0 ]; then
	log_error "ERROR: snapper create failed!"
	    quit 1
    fi
fi

SNAPSHOT_DIR=/.snapshots/${SNAPSHOT_ID}/snapshot

# Make the snapshot read-write:
btrfs property set  ${SNAPSHOT_DIR} ro false
if [ $? -ne 0 ]; then
    log_error "ERROR: changing ${SNAPSHOT_DIR} to read-write failed!"
    quit 1
fi

# Set indicator for RPM pre/post sections to detect whether we run in a
# transactional update
export TRANSACTIONAL_UPDATE=true

/usr/bin/casync --log-level=debug -v --seed-output=no --seed="/.snapshots/${CURRENT_SNAPSHOT_ID}/snapshot/" --reflink=yes extract --store=/mnt/openSUSE-MicroOS-20210320.castr /mnt/openSUSE-MicroOS-20210320.caidx "${SNAPSHOT_DIR}"
if [ $? -ne 0 ]; then
  quit 1
fi

# Sync old etc directory
rsync --archive --inplace --xattrs --acls --delete --quiet "/.snapshots/${CURRENT_SNAPSHOT_ID}/snapshot/etc/" "${SNAPSHOT_DIR}/etc/"

# Create bind mounts or else grub2 will fail
MOUNT_DIR=`mktemp -d`
mount -o rbind ${SNAPSHOT_DIR} ${MOUNT_DIR}
if [ ! -d ${MOUNT_DIR}/.snapshots ]; then
  mkdir -p ${MOUNT_DIR}/.snapshots
  chmod 750 ${MOUNT_DIR}/.snapshots
fi
mount -o bind,ro /.snapshots ${MOUNT_DIR}/.snapshots

# Bind system directories into chroot environment
for sysdir in /proc /sys /dev; do
    if ! mount --rbind "${sysdir}" "${MOUNT_DIR}${sysdir}" ||
       ! mount --make-rslave "${MOUNT_DIR}${sysdir}"; then
        log_error "ERROR: mounting ${sysdir} failed!"
        quit 1
    fi
done

# Check which directories in /boot/grub2 need to be mounted,
# otherwise grub2 will not boot after a version update.
DIR_TO_MOUNT="${DIR_TO_MOUNT} $(awk '$2 ~ /^\/boot\/grub2\// { print $2 }' /proc/mounts)"
# On EFI systems the EFI partition is also required
if [ -e /boot/efi ]; then
    DIR_TO_MOUNT="${DIR_TO_MOUNT} /boot/efi"
fi

for directory in $DIR_TO_MOUNT ; do
    # Make sure mount point exists. With /var on an own subvolume, this directory
    # is empty by default and mount points don't exist in chroot environment.
    test -d ${SNAPSHOT_DIR}/$directory || mkdir -p ${SNAPSHOT_DIR}/$directory
    mount -o bind /$directory ${SNAPSHOT_DIR}/$directory
    if [ $? -ne 0 ]; then
        log_error "ERROR: mount of $directory failed!"
        quit 1
    fi
done

log_info "Update bootloader..."
chroot ${MOUNT_DIR} update-bootloader --refresh
if [ $? -ne 0 ]; then
    log_error "ERROR: Updating bootloader failed!"
    quit 1
fi

log_info "Creating new initrd..."
chroot ${MOUNT_DIR} /sbin/mkinitrd
if [ $? -ne 0 ]; then
    log_error "ERROR: mkinitrd failed!"
    EXITCODE=1
else
    REBUILD_KDUMP_INITRD=1
fi

if [ ${REBUILD_KDUMP_INITRD} -eq 1 ]; then
  log_info "Trying to rebuild kdump initrd"
  rebuild_kdump_initrd ${MOUNT_DIR}
fi

teardown

# Somersault:
if [ $EXITCODE -eq 0 ]; then
    BTRFS_ID=`btrfs subvolume list -o /.snapshots | grep ${SNAPSHOT_DIR} | awk '{print $2}'`
    if [ -z "$BTRFS_ID" ]; then
	log_error "ERROR: couldn't determine btrfs subvolume ID"
	EXITCODE=1
    else
	btrfs subvolume set-default $BTRFS_ID ${SNAPSHOT_DIR}
	if [ $? -ne 0 ]; then
	    log_error "ERROR: btrfs set-default $BTRFS_ID failed!"
	    EXITCODE=1;
	else
	    # Save the old snapshot or else it will get lost.
	    add_unique_id ${CURRENT_SNAPSHOT_ID}
	    save_state_file ${SNAPSHOT_ID}
	    # Reset in-progress flag
	    snapper ${SNAPPER_NO_DBUS} modify -u "transactional-update-in-progress=" ${SNAPSHOT_ID}
	fi
    fi
fi

# Make the snapshot ro flag identical to current root:
btrfs property set  ${SNAPSHOT_DIR} ro ${RO_ROOT}
if [ $? -ne 0 ]; then
    log_error "ERROR: changing ${SNAPSHOT_DIR} to ro=${RO_ROOT} failed!"
    EXITCODE=1
fi

if [ ${EXITCODE} -ne 0 ]; then
    quit ${EXITCODE}
elif [ $REBOOT_AFTERWARDS -eq 0 ]; then
    log_error "\nPlease reboot your machine to activate the changes and avoid data loss."
    touch "${NEEDS_RESTARTING_FILE}"
fi

log_info "New default snapshot is #${SNAPSHOT_ID} (${SNAPSHOT_DIR})."

if [ ${EXITCODE} -eq 0 ]; then
    if [ $REBOOT_AFTERWARDS -eq 1 ]; then
	trap '-' HUP INT QUIT TERM
	case "$REBOOT_METHOD" in
	    auto)
		reboot_autodetect
		;;
	    kured)
		reboot_via_kured
		;;
	    rebootmgr)
		reboot_via_rebootmgr
		;;
	    systemd)
		reboot_via_systemd
		;;
	    kexec)
		reboot_via_kexec
		;;
	    none)
		;;
	    *)
	        log_info "Unsupported reboot method, falling back to 'auto'; please"
	        log_info "check your configuration in ${CONFFILE}."
	        reboot_autodetect
	        ;;
	esac
	log_error "The system couldn't be rebooted using method '${REBOOT_METHOD}'. Please reboot the system"
	log_error "manually."
    fi
fi

log_info "transactional-image-update finished"

exit $EXITCODE
